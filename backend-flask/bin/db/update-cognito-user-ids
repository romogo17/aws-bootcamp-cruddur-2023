#!/usr/bin/env python3

import boto3
import os
import re
import sys
import argparse

from psycopg_pool import ConnectionPool

print("=== db-update-cognito-user-ids")


class Db:
    def __init__(self, connection_url):
        self.init_pool(connection_url)

    def init_pool(self, connection_url):
        self.pool = ConnectionPool(connection_url)

    def query_commit(self, sql, params={}):
        pattern = r"\bRETURNING\b"
        is_returning_id = re.search(pattern, sql)

        try:
            with self.pool.connection() as conn:
                cur = conn.cursor()
                cur.execute(sql, params)
                if is_returning_id:
                    returning_id = cur.fetchone()[0]
                conn.commit()
                if is_returning_id:
                    return returning_id
        except Exception as err:
            err_type, err_obj, traceback = sys.exc_info()
            line_num = traceback.tb_lineno
            print("psycopg ERROR:", err, "on line number:", line_num)
            print("psycopg traceback:", traceback, "-- type:", err_type)


parser = argparse.ArgumentParser()
parser.add_argument("--prod", default=False)
args = parser.parse_args()

db_connection_url = os.getenv("REMOTE_DB_CONNECTION_URL") if args.prod is True else os.getenv("LOCAL_DB_CONNECTION_URL")
db = Db(db_connection_url)


def update_users_with_cognito_user_id(handle, sub):
    sql = """
    UPDATE public.users
    SET cognito_user_id = %(sub)s
    WHERE
      users.handle = %(handle)s;
    """
    db.query_commit(sql, {"handle": handle, "sub": sub})


def get_cognito_user_ids():
    userpool_id = os.getenv("AWS_USER_POOLS_ID")
    client = boto3.client("cognito-idp")
    params = {"UserPoolId": userpool_id, "AttributesToGet": ["preferred_username", "sub"]}
    response = client.list_users(**params)
    users = response["Users"]
    dict_users = {}
    for user in users:
        attrs = user["Attributes"]
        sub = next((a for a in attrs if a["Name"] == "sub"), None)
        handle = next((a for a in attrs if a["Name"] == "preferred_username"), None)
        dict_users[handle["Value"]] = sub["Value"]
    return dict_users


users = get_cognito_user_ids()

for handle, sub in users.items():
    print("updating:", handle, sub)
    update_users_with_cognito_user_id(handle=handle, sub=sub)
